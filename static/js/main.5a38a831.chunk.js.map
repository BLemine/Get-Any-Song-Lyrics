{"version":3,"sources":["Lyrics.js","Song.js","serviceWorker.js","index.js"],"names":["Lyrics","props","useState","CircularProgress","text","setText","useEffect","axios","get","singer","song","then","res","data","lyrics","catch","err","console","log","style","height","overflow","Copyright","Typography","variant","color","align","Link","href","Date","getFullYear","useStyles","makeStyles","theme","root","image","backgroundImage","backgroundRepeat","backgroundColor","palette","type","grey","backgroundSize","backgroundPosition","paper","margin","spacing","display","flexDirection","alignItems","avatar","secondary","main","form","width","marginTop","submit","Song","classes","gotten","setGotten","setLyrics","Grid","container","component","className","CssBaseline","item","xs","sm","md","Paper","elevation","square","Avatar","noValidate","onSubmit","e","preventDefault","target","childNodes","lastChild","value","Fragment","Button","fullWidth","onClick","TextField","required","id","label","name","autoComplete","autoFocus","Box","mt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gVAIe,SAASA,EAAOC,GAAQ,IAAD,EACZC,mBACtB,kBAACC,EAAA,EAAD,OAFkC,mBAC7BC,EAD6B,KACvBC,EADuB,KAepC,OAXAC,qBAAU,WACRC,IACGC,IAAI,6BAA+BP,EAAMQ,OAAS,IAAMR,EAAMS,MAC9DC,MAAK,SAAAC,GACJP,EAAQO,EAAIC,KAAKC,WAElBC,OAAM,SAAAC,GACLX,EAAQ,kBACRY,QAAQC,IAAIF,SAGX,yBAAKG,MAAO,CAAEC,OAAQ,IAAKC,SAAU,SAAWjB,GCLzD,SAASkB,IACP,OACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,QAAQC,MAAM,gBAAgBC,MAAM,UACrD,kBACD,kBAACC,EAAA,EAAD,CAAMF,MAAM,UAAUG,KAAK,8BAA3B,WAEQ,KACP,IAAIC,MAAOC,cACX,KAKP,IAAMC,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJd,OAAQ,SAEVe,MAAO,CACLC,gBAAiB,kDACjBC,iBAAkB,YAClBC,gBACyB,SAAvBL,EAAMM,QAAQC,KACVP,EAAMM,QAAQE,KAAK,KACnBR,EAAMM,QAAQE,KAAK,IACzBC,eAAgB,QAChBC,mBAAoB,UAEtBC,MAAO,CACLC,OAAQZ,EAAMa,QAAQ,EAAG,GACzBC,QAAS,OACTC,cAAe,SACfC,WAAY,UAEdC,OAAQ,CACNL,OAAQZ,EAAMa,QAAQ,GACtBR,gBAAiBL,EAAMM,QAAQY,UAAUC,MAE3CC,KAAM,CACJC,MAAO,OACPC,UAAWtB,EAAMa,QAAQ,IAE3BU,OAAQ,CACNX,OAAQZ,EAAMa,QAAQ,EAAG,EAAG,QAIjB,SAASW,IACtB,IAAMC,EAAU3B,IADa,EAED7B,oBAAS,GAFR,mBAEtByD,EAFsB,KAEdC,EAFc,OAGD1D,qBAHC,mBAGtBY,EAHsB,KAGd+C,EAHc,KA4B7B,OACE,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,OAAOC,UAAWP,EAAQxB,MAClD,kBAACgC,EAAA,EAAD,MACA,kBAACJ,EAAA,EAAD,CAAMK,MAAI,EAACC,IAAI,EAAOC,GAAI,EAAGC,GAAI,EAAGL,UAAWP,EAAQvB,QACvD,kBAAC2B,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGN,UAAWO,IAAOC,UAAW,EAAGC,QAAM,GACrE,yBAAKR,UAAWP,EAAQd,OACtB,kBAAC8B,EAAA,EAAD,CAAQT,UAAWP,EAAQR,QACzB,kBAAC,IAAD,OAEF,kBAAC3B,EAAA,EAAD,CAAYyC,UAAU,KAAKxC,QAAQ,MAAnC,gBAGEmC,GACA,0BAAMM,UAAWP,EAAQL,KAAMsB,YAAU,EAACC,SArCrC,SAAAC,GACbA,EAAEC,iBACF,IAAMrE,EAASoE,EAAEE,OAAOC,WAAW,GAAGC,UAAUD,WAAW,GAAGE,MACxDxE,EAAOmE,EAAEE,OAAOC,WAAW,GAAGC,UAAUD,WAAW,GAAGE,MAC5DtB,GAAU,GACVC,EACE,kBAAC,IAAMsB,SAAP,KACE,kBAACnF,EAAD,CAAQS,OAAQA,EAAQC,KAAMA,IAC9B,kBAAC0E,EAAA,EAAD,CACE5C,KAAK,SACL6C,WAAS,EACT7D,QAAQ,YACRC,MAAM,UACNwC,UAAWP,EAAQF,OACnB8B,QAAS,WACP1B,GAAU,KAPd,eA8BM,kBAAC2B,EAAA,EAAD,CACE/D,QAAQ,WACRqB,OAAO,SACP2C,UAAQ,EACRH,WAAS,EACTI,GAAG,SACHC,MAAM,gBACNC,KAAK,SACLC,aAAa,SACbC,WAAS,IAEX,kBAACN,EAAA,EAAD,CACE/D,QAAQ,WACRqB,OAAO,SACP2C,UAAQ,EACRH,WAAS,EACTM,KAAK,OACLD,MAAM,OACND,GAAG,SAGL,kBAACL,EAAA,EAAD,CACE5C,KAAK,SACL6C,WAAS,EACT7D,QAAQ,YACRC,MAAM,UACNwC,UAAWP,EAAQF,QALrB,WASA,kBAACsC,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACzE,EAAD,QAILqC,GAAU7C,K,MC7HDkF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC7C,EAAD,MAAU8C,SAASC,eAAe,SD4H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhG,MAAK,SAAAiG,GACjCA,EAAaC,kB","file":"static/js/main.5a38a831.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport axios from \"axios\";\r\n\r\nexport default function Lyrics(props) {\r\n  const [text, setText] = useState(\r\n    <CircularProgress />\r\n  );\r\n  useEffect(() => {\r\n    axios\r\n      .get(\"https://api.lyrics.ovh/v1/\" + props.singer + \"/\" + props.song)\r\n      .then(res => {\r\n        setText(res.data.lyrics);\r\n      })\r\n      .catch(err => {\r\n        setText(\"Not found mate\")\r\n        console.log(err);\r\n      });\r\n  });\r\n  return <div style={{ height: 400, overflow: \"auto\" }}>{text}</div>;\r\n}\r\n","import React, { useState } from \"react\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport LibraryMusicIcon from \"@material-ui/icons/LibraryMusic\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Lyrics from \"./Lyrics\";\r\n\r\nfunction Copyright() {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n      {\"Copyright Â© \"}\r\n      <Link color=\"inherit\" href=\"https://github.com/BLemine\">\r\n        BLemine\r\n      </Link>{\" \"}\r\n      {new Date().getFullYear()}\r\n      {\".\"}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    height: \"100vh\"\r\n  },\r\n  image: {\r\n    backgroundImage: \"url(https://source.unsplash.com/featured/?song)\",\r\n    backgroundRepeat: \"no-repeat\",\r\n    backgroundColor:\r\n      theme.palette.type === \"dark\"\r\n        ? theme.palette.grey[900]\r\n        : theme.palette.grey[50],\r\n    backgroundSize: \"cover\",\r\n    backgroundPosition: \"center\"\r\n  },\r\n  paper: {\r\n    margin: theme.spacing(8, 4),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\"\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1)\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2)\r\n  }\r\n}));\r\n\r\nexport default function Song() {\r\n  const classes = useStyles();\r\n  const [gotten, setGotten] = useState(false);\r\n  const [lyrics, setLyrics] = useState();\r\n  const submit = e => {\r\n    e.preventDefault();\r\n    const singer = e.target.childNodes[0].lastChild.childNodes[0].value;\r\n    const song = e.target.childNodes[1].lastChild.childNodes[0].value;\r\n    setGotten(true);\r\n    setLyrics(\r\n      <React.Fragment>\r\n        <Lyrics singer={singer} song={song} />\r\n        <Button\r\n          type=\"submit\"\r\n          fullWidth\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          className={classes.submit}\r\n          onClick={() => {\r\n            setGotten(false);\r\n          }}\r\n        >\r\n          Go Back\r\n        </Button>\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Grid container component=\"main\" className={classes.root}>\r\n      <CssBaseline />\r\n      <Grid item xs={false} sm={4} md={7} className={classes.image} />\r\n      <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\r\n        <div className={classes.paper}>\r\n          <Avatar className={classes.avatar}>\r\n            <LibraryMusicIcon />\r\n          </Avatar>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Find Lyrics\r\n          </Typography>\r\n          {!gotten && (\r\n            <form className={classes.form} noValidate onSubmit={submit}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                id=\"singer\"\r\n                label=\"Singer's name\"\r\n                name=\"singer\"\r\n                autoComplete=\"singer\"\r\n                autoFocus\r\n              />\r\n              <TextField\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                name=\"song\"\r\n                label=\"Song\"\r\n                id=\"song\"\r\n              />\r\n\r\n              <Button\r\n                type=\"submit\"\r\n                fullWidth\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.submit}\r\n              >\r\n                Find it\r\n              </Button>\r\n              <Box mt={5}>\r\n                <Copyright />\r\n              </Box>\r\n            </form>\r\n          )}\r\n          {gotten && lyrics}\r\n        </div>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Song from \"./Song\";\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<Song />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}